// <auto-generated />
using System;
using BaseCodeDotNetCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseCodeDotNetCore.Data.Migrations
{
    [DbContext(typeof(BaseCodeDbContext))]
    [Migration("20230415233112_Iniial")]
    partial class Iniial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Budget", b =>
                {
                    b.Property<int>("BudgetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("BudgetDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubCategoryID")
                        .HasColumnType("int");

                    b.HasKey("BudgetID");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 463, DateTimeKind.Local).AddTicks(4537),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "Income"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 463, DateTimeKind.Local).AddTicks(5854),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "Expense"
                        });
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .HasColumnType("varchar(95)");

                    b.Property<bool?>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AllowedOrigin")
                        .HasColumnType("longtext");

                    b.Property<bool?>("ApplicationType")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("RefreshTokenLifeTime")
                        .HasColumnType("int");

                    b.Property<string>("Secret")
                        .HasColumnType("longtext");

                    b.HasKey("ClientID");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientID = "C001",
                            Active = true,
                            AllowedOrigin = "Allowed Origin",
                            ApplicationType = true,
                            CreatedBy = "Someone",
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(5739),
                            ModifiedBy = "Someone Else",
                            ModifiedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(7025),
                            Name = "Charlie Brown",
                            RefreshTokenLifeTime = 1000,
                            Secret = "Secret"
                        },
                        new
                        {
                            ClientID = "C002",
                            Active = true,
                            AllowedOrigin = "Allowed Origin",
                            ApplicationType = true,
                            CreatedBy = "Someone",
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(7713),
                            ModifiedBy = "Someone Else",
                            ModifiedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(7724),
                            Name = "Millie Brown",
                            RefreshTokenLifeTime = 1000,
                            Secret = "Secret"
                        },
                        new
                        {
                            ClientID = "C003",
                            Active = true,
                            AllowedOrigin = "Allowed Origin",
                            ApplicationType = true,
                            CreatedBy = "Someone",
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(7730),
                            ModifiedBy = "Someone Else",
                            ModifiedDate = new DateTime(2023, 4, 16, 7, 31, 11, 462, DateTimeKind.Local).AddTicks(7732),
                            Name = "Bobby Brown",
                            RefreshTokenLifeTime = 1000,
                            Secret = "Secret"
                        });
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 4, 16, 7, 31, 11, 448, DateTimeKind.Local).AddTicks(9986));

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Designation")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "Cebu City",
                            CompanyName = "Riot",
                            DateCreated = new DateTime(2023, 4, 16, 7, 31, 11, 458, DateTimeKind.Local).AddTicks(1591),
                            DateUpdated = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Designation = "Developer",
                            Name = "John Doe"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "Carcar",
                            CompanyName = "Ubisoft",
                            DateCreated = new DateTime(2023, 4, 16, 7, 31, 11, 458, DateTimeKind.Local).AddTicks(3305),
                            DateUpdated = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Designation = "Janitor",
                            Name = "Michael Doe"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "Davao City",
                            CompanyName = "Activision",
                            DateCreated = new DateTime(2023, 4, 16, 7, 31, 11, 458, DateTimeKind.Local).AddTicks(3322),
                            DateUpdated = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Designation = "Marketing Manager",
                            Name = "Jane Doe"
                        });
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryID");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 464, DateTimeKind.Local).AddTicks(3263),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "1st Half Salary"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 464, DateTimeKind.Local).AddTicks(4250),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "2nd Half Salary"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 464, DateTimeKind.Local).AddTicks(4259),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "Utility Expense"
                        },
                        new
                        {
                            SubCategoryId = 4,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2023, 4, 16, 7, 31, 11, 464, DateTimeKind.Local).AddTicks(4262),
                            ModifiedDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "Grocery Expense"
                        });
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TransactionId");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasColumnType("longtext");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            CreatedBy = 1,
                            DateCreated = new DateTime(2023, 4, 16, 7, 31, 11, 453, DateTimeKind.Local).AddTicks(1886),
                            DateUpdated = new DateTime(2023, 4, 16, 7, 31, 11, 453, DateTimeKind.Local).AddTicks(3137),
                            IsActive = true,
                            RoleName = "Admin",
                            UpdatedBy = 1
                        },
                        new
                        {
                            RoleID = 2,
                            CreatedBy = 1,
                            DateCreated = new DateTime(2023, 4, 16, 7, 31, 11, 453, DateTimeKind.Local).AddTicks(3906),
                            DateUpdated = new DateTime(2023, 4, 16, 7, 31, 11, 453, DateTimeKind.Local).AddTicks(3913),
                            IsActive = true,
                            RoleName = "User",
                            UpdatedBy = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "52e51d6a-755d-438e-8276-0567be4beaef",
                            ConcurrencyStamp = "cb389a9c-918e-4bd1-8d9a-882fb6987e54",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "23d37f55-acb9-44ff-adf1-3d268a5e81d5",
                            ConcurrencyStamp = "a27c7626-7130-4857-97c1-15819f6f419b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "U001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "longtext",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 4, 16, 7, 31, 11, 454, DateTimeKind.Unspecified).AddTicks(3818), new TimeSpan(0, 8, 0, 0, 0)),
                            NormalizedEmail = "user1@GMAIL.COM",
                            NormalizedUserName = "USER001",
                            PasswordHash = "longtext",
                            PhoneNumber = "+639987556824",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "longtext",
                            TwoFactorEnabled = true,
                            UserName = "User001"
                        },
                        new
                        {
                            Id = "U002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "lIs8sIcoeI5FvAU",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 4, 16, 7, 31, 11, 456, DateTimeKind.Unspecified).AddTicks(7124), new TimeSpan(0, 8, 0, 0, 0)),
                            NormalizedEmail = "user2@GMAIL.COM",
                            NormalizedUserName = "USER002",
                            PasswordHash = "ASzrmQDi4KfHhH4",
                            PhoneNumber = "+639987556824",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "p8IZmrCVt0pNghD",
                            TwoFactorEnabled = true,
                            UserName = "User002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Budget", b =>
                {
                    b.HasOne("BaseCodeDotNetCore.Data.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.SubCategory", b =>
                {
                    b.HasOne("BaseCodeDotNetCore.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.Transaction", b =>
                {
                    b.HasOne("BaseCodeDotNetCore.Data.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BaseCodeDotNetCore.Data.Entities.User", b =>
                {
                    b.HasOne("BaseCodeDotNetCore.Data.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
